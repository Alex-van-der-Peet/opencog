# - Find ROS includes and library
#
# This module defines
#  ROS_INCLUDE_DIR
#  ROS_LIBRARIES, the libraries to link against to use ROS.
#  ROS_LIBRARY, the location of the libraries
#  ROS_EXEC, the ROS package directories
#  ROS_EXECS, the ROS packages to run
#  ROS_FOUND, If false, do not try to use ROS
#
# Redistribution and use is allowed according to the terms of the BSD license.
# For details see the accompanying COPYING-CMAKE-SCRIPTS file.

IF (ROS_EXECS AND ROS_INCLUDE_DIR AND ROS_LIBRARY)
   SET(ROS_FIND_QUIETLY TRUE) # Already in cache, be silent
ENDIF (ROS_EXECS AND ROS_INCLUDE_DIR AND ROS_LIBRARY)

FIND_PATH(ROS_INCLUDE_DIR NAME ros.h PATHS
    $ENV{ROS_ROOT}/../../include
    $ENV{ROS_ROOT}/../../include/ros
)

FIND_LIBRARY(ROS_LIBRARY NAMES roslib PATHS
    $ENV{ROS_ROOT}/../../lib
)

FIND_LIBRARY(ROS_PACK NAMES rospack PATHS
    $ENV{ROS_ROOT}/../../lib
)

FIND_LIBRARY(ROS_CPP NAMES roscpp PATHS
    $ENV{ROS_ROOT}/../../lib
)

FIND_LIBRARY(ROS_CPP_SERIALIZATION NAMES roscpp_serialization PATHS
    $ENV{ROS_ROOT}/../../lib
)

FIND_LIBRARY(ROS_CONSOLE NAMES rosconsole PATHS
    $ENV{ROS_ROOT}/../../lib
)

FIND_LIBRARY(ROS_TIME NAMES rostime PATHS
    $ENV{ROS_ROOT}/../../lib
)

FIND_PROGRAM(ROS_EXEC NAME rosrun PATHS
    $ENV{ROS_ROOT}/../../bin
)

# Copy the results to the output variables.
IF (ROS_INCLUDE_DIR AND ROS_EXEC AND ROS_LIBRARY AND ROS_PACK AND ROS_CPP AND ROS_CONSOLE AND ROS_CPP_SERIALIZATION AND ROS_TIME)
	SET(ROS_FOUND 1)
        SET(ROS_LIBRARIES ${ROS_LIBRARY} ${ROS_PACK} ${ROS_CPP} ${ROS_CONSOLE} ${ROS_CPP_SERIALIZATION} ${ROS_TIME})
	SET(ROS_INCLUDE_DIRS ${ROS_INCLUDE_DIR})
	SET(ROS_EXECS ${ROS_EXECS})
	MESSAGE(STATUS "Found these ros libs: ${ROS_LIBRARIES}")
	
ELSE (ROS_INCLUDE_DIR AND ROS_EXEC AND ROS_LIBRARY AND ROS_PACK AND ROS_CPP AND ROS_CONSOLE AND ROS_CPP_SERIALIZATION AND ROS_TIME)
	SET(ROS_FOUND 0)
        SET(ROS_LIBRARIES)
	SET(ROS_INCLUDE_DIRS)
	SET(ROS_EXECS)
        IF(NOT ROS_LIBRARY)
            MESSAGE(STATUS "No ROS libraries found.")
        ENDIF(NOT ROS_LIBRARY)
        IF(NOT ROS_INCLUDE_DIR)
            MESSAGE(STATUS "No ROS includes directories found.")
        ENDIF(NOT ROS_INCLUDE_DIR)
        IF(NOT ROS_EXEC)
            MESSAGE(STATUS "No ROS packages found.")
        ENDIF(NOT ROS_EXEC)
ENDIF (ROS_INCLUDE_DIR AND ROS_EXEC AND ROS_LIBRARY AND ROS_PACK AND ROS_CPP AND ROS_CONSOLE AND ROS_CPP_SERIALIZATION AND ROS_TIME)

# Report the results.
IF (NOT ROS_FOUND)
	SET(ROS_DIR_MESSAGE "ROS was not found. Make sure ROS_LIBRARY, ROS_INCLUDE_DIR, and ROS_EXEC are set.")
	IF (NOT ROS_FIND_QUIETLY)
		MESSAGE(STATUS "${ROS_DIR_MESSAGE}")
	ELSE (NOT ROS_FIND_QUIETLY)
		IF (ROS_FIND_REQUIRED)
			MESSAGE(FATAL_ERROR "${ROS_DIR_MESSAGE}")
		ENDIF (ROS_FIND_REQUIRED)
	ENDIF (NOT ROS_FIND_QUIETLY)
ENDIF (NOT ROS_FOUND)


MARK_AS_ADVANCED(
    ROS_INCLUDE_DIRS
    ROS_LIBRARIES
    ROS_EXECS
)

